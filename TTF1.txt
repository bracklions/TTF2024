- オープニング
  - 26カ国から参加
  - 英語日本語は半々
- LambdaTest(プラチナスポンサー)
  - テストの77%はテスト環境の管理に費やされている
  - フレーキーテスト検知
  - オートヒーリング
  - KaneAI
    - GitHubとかとも連携
- CI/CDの未来　jenkins開発した川口さん
  - スピードのプレッシャー
    - ローコードノーコードのテストが求められることが増えている
  - 生成AI
    - 静的なコード分析するときに生成AIを使えるのか
  - CIが動くとたくさんの変更が集中
  - DevOpsでテストのところで詰まりが生じる
    - 2週間で100回りリースしている人もいる
    - コードを書くのはAIで簡単になってきている
  - 何をしているか
    - テストの詰まりを改善するためにテストレフト
    - Testing is in architecture
      - テストをしやすいコードを書くというモチベーションになってきた
      - モバイルアプリのテストは難しいというブログを書いた
    - プロダクションを使って品質を高めよう
      - 事例
        - ユーザートラフィックを本番環境で調べた
        - アイデアを受けいた後プロダクションに反映
          - ゴールは壊れないようにすることだが故障は起こるので防御をしていく
            - 火災が起きたらすぐに消化器で消すのと同じことが必要
            - リスクをなくすのではなく受け入れて管理をする
              - Googleでやっている
              - 99.5%のサービスレベルに合わせていく
    - シフトレフトライトより上のレベルになり、品質管理に焦点が当たっている
    - ソフトウェア業界でwebは一部、日本では組み込みも多い
      - より良いQualityをより早く
      - でもシステムが使えなくなる障害も実際に起きている
        - Googleとは考え方が違うけど、イノベーションを取り込む余地がある
    - パイプラインのブラックボックスをどうにかしていく
      - パラレルにしたいというが、本当に適用できるのか
      - 投資が回収できるのか
      - もっともっと簡単にしようとすればするほど複雑になってくる
    - Merge queue
      - 最適化を考えるのが重要
      - 統合プロセスは妥当だとは思っているが、やり方の1つである
        - でもこれからそうではない未来が来るかも、機械学習が修正すべき箇所を見つけるようになってくれるかもしれない
    - Matrix sparsening
      - 2つのコンフィグレーションの軸があり、理想的には全部やっていくべきだが、ランダムにピックアップするとコンビネーションが減らせるかもしれない
    - Incremental building & Testing
      - もっと洗練されたビルディングツール(Googleのbazelとか)
      - たくさんの変更がコードの中に生じるが、どこをテストすればいいのか、そのテストする数を減らすことができる
      - 次世代のツールはクラウドベースに
    - Inteligent test selection
      - 大変なのは結合テスト
      - 統計的なテストセレクションは制限があるので、アルゴリズムを活用したスマートなテストセレクション
      - プレマージをすればフレーキーテストをしなくて済む
      - 機械がテストをセレクトしていくことで効率化
    - Predictive test selection
      - Facebookでも活用した先端的な戦略
      - 菱形の青い部分を変更したら、1,2,3,4をテストする必要がある、1は関係が強い2は関係が弱い
    - Triaging with AI
      - テストの頻度も増えてコードも増えていき、サステナブルではない
      - テスト実行の情報も増えていく
      - どのテストが失敗しているか
      - Q&Aのチャットボットなども同様なので、すでに世の中で起きていること
    - AIの活用
      - Escalating flakiness
        - Noisy Test をAIが判断していく
  - Q&A
    - グローバルなクラッシュみたなことを避けるには
      - 避けることはできない、起こったことは起こったこと
      - 広範囲な視点で何がQAできるか、起こった後にどう対応していくか
    - カオステスト、レジリエンステスト
      - カオスエンジニアリングがあったが、ソフトウェアがそういう作りになっていなかったらレジリエンスになっていかない
  - 資料もほぼなくきつかった
- 日本で国際的な開発者として働くこと
  - 日本は働きづらいと言われているが違った
  - アンケート取った
    - 英語の使用頻度が高いほど報酬も高くなった
    - 報酬以外でも好意的な回答
  - 重要な福利厚生
    - リモートワーク
    - 企業はハイブリッドにしようとしてる
  - 男女差が24%もある
  - TokyoDev
    - 求人紹介、コミュニティ、記事
  - テスト関係ない、TokyoDevの宣伝という感じ
- テスト自動化、私たちはどこに向かうべきか(Keysight)
  - 月面探索期は当時のNASAの研究者が何度もテストしてミッション達成
  - バクテリアファージも月面探索きと同じような構造になっている
  - Keysightのテスト：Test like a Real User
    - 複雑な構造を簡単なものに分割
    - 3つのシンプルな認知、判断、操作にして
    - スマホの画面上でどういった操作をするか指定してAIが探索的にやる
  - テストを10倍早くするにはどうしたらいいか
- JSTQBのご紹介
  - 日本語で
- クロージング
  - 国際的なテストのカンファレンスは日本で初めて
